========================================================================
pointer declarations vs multiplications
========================================================================

int main() {
  // declare a function pointer
  A * b(int a);

  // evaluate an expression
  c * d(5);
}

---

(translation_unit (function_definition
  (type_name)
  (function_declarator (variable_name) (parameter_list))
  (compound_statement
    (comment)
    (declaration
      (type_name)
      (pointer_declarator (function_declarator
        (variable_name)
        (parameter_list (parameter_declaration (type_name) (variable_name))))))
    (comment)
    (expression_statement (math_expression
      (variable_name)
      (call_expression (variable_name) (argument_list (number_literal))))))))

========================================================================
casts vs multiplications
========================================================================

/*
 * ambiguities
 */

int main() {
  // cast
  a((B *)c);

  // parenthesized product
  d((e * f));
}

---

(translation_unit
  (comment)
  (function_definition
    (type_name)
    (function_declarator (variable_name) (parameter_list))
    (compound_statement
      (comment)
      (expression_statement (call_expression
        (variable_name)
        (argument_list (cast_expression (type_clause (type_name) (abstract_pointer_declarator)) (variable_name)))))
      (comment)
      (expression_statement (call_expression
        (variable_name)
        (argument_list (parenthesized_expression (math_expression (variable_name) (variable_name)))))))))

========================================================================
function-like type macros vs function calls
========================================================================

// this is a macro
GIT_INLINE(int *) x = 5;

---

(translation_unit
  (comment)
  (declaration
    (macro_type_specifier (identifier) (type_clause (type_name) (abstract_pointer_declarator)))
    (init_declarator (variable_name) (number_literal))))

========================================================================
function calls vs parenthesized declarators vs macro types
========================================================================

int main() {
  /*
   * Could be either:
   *   - function call
   *   - declaration w/ parenthesized declarator
   *   - declaration w/ macro type, no declarator
   */
  ABC(d);

  /*
   * Normal declaration
   */
  efg hij;
}

---

(translation_unit
  (function_definition
    (type_name)
    (function_declarator (variable_name) (parameter_list))
    (compound_statement
      (comment)
      (declaration (type_name) (variable_name))
      (comment)
      (declaration (type_name) (variable_name)))))

========================================================================
Comments after for loops with ambiguities
========================================================================

int main() {
  for (a *b = c; d; e) {
    aff;
  }

  // a-comment

  g;
}

---

(translation_unit (function_definition
  (type_name)
  (function_declarator (variable_name) (parameter_list))
  (compound_statement
    (for_statement
      (declaration (type_name) (init_declarator
        (pointer_declarator (variable_name))
        (variable_name)))
      (variable_name)
      (variable_name)
      (compound_statement
        (expression_statement (variable_name))))
    (comment)
    (expression_statement (variable_name)))))
